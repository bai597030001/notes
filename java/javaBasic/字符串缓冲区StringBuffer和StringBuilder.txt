
String 字符串常量

StringBuffer 字符串变量（线程安全）

StringBuilder 字符串变量（非线程安全）


三者在执行速度方面的比较： StringBuilder >  StringBuffer  >  String

	从上面的名字可以看到，String是“字符创常量”，也就是不可改变的对象。
	
	对于这句话的理解你可能会产生这样一个疑问  ，比如这段代码：
	
		String s = "abcd";
		s = s+1;
		System.out.print(s);// result : abcd1
	
	 我们明明就是改变了String型的变量s的，为什么说是没有改变呢? 其实这是一种欺骗，
	 
	 JVM是这样解析这段代码的：首先创建对象s，赋予一个abcd，然后再创建一个新的对象s用来
	 执行第二行代码，也就是说我们之前对象s并没有变化，所以我们说String类型是不可改变的对象了，
	 由于这种机制，每当用String操作字符串时，实际上是在不断的创建新的对象，而原来的对象就会
	 变为垃圾被ＧＣ回收掉，可想而知这样执行效率会有多底。

　　而StringBuffer与StringBuilder就不一样了，他们是字符串变量，是可改变的对象，
	每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，
	这样就不会像String一样创建一些而外的对象进行操作了，当然速度就快了。
	
	
	一个特殊的例子：
	
		String str = “This is only a” + “ simple” + “ test”;
		StringBuffer builder = new StringBuilder(“This is only a”).append(“ simple”).append(“ test”);
		
	你会很惊讶的发现，生成str对象的速度简直太快了，而这个时候StringBuffer居然速度上根本一点都不占优势。
	
	其实这是JVM的一个把戏，实际上：

　　　　String str = “This is only a” + “ simple” + “test”;

　　其实就是：

　　　　String str = “This is only a simple test”;

　　所以不需要太多的时间了。

	但大家这里要注意的是，如果你的字符串是来自另外的String对象的话，速度就没那么快了，譬如：
	
		String str2 = “This is only a”;

　　　　String str3 = “ simple”;

　　　　String str4 = “ test”;

　　　　String str1 = str2 +str3 + str4;
　　
	这时候JVM会规规矩矩的按照原来的方式去做。