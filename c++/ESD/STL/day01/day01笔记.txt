一、模板起源
	1.C/C++语言的静态类型系统，在满足效率与安全性要求的同时，很大程度上也成为阻碍程序员编写通用代码的桎梏。
		它迫使人们不得不为每一种数据类型编写完全或几乎完全相同的实现，虽然它们在抽象层面上是一致的。
	2.宏定义只是在预处理器的作用下，针对源代码的文本替换，其本身并不具备函数语义。
		因此借助于参数宏(宏函数)可以在某种程度上是程序的编写者摆脱那些源于类型的约束和限制，但同时也因此丧失了类型的安全性。
	3.利用宏定义构建通用代码的框架，让预处理器将其扩展为针对不同类型的具体版本。将宏的一般性和函数的类型安全性完美地结合起来。
二、函数模板
	1.函数模板的定义
		1)语法形式
			template<typename 类型形参1, typename 类型形参2, ...>
			返回类型 函数模板名 (调用形参表) 
			{
				函数体;
			}
			例如：
			template<typename A, class b, typename _C>
			A funtion (b arg) 
			{
				_C var;
				...
			}
		2)类型参数
			A.类型形参只要求为合法的标识符即可，必须被typename或class关键字修饰。
			B.类型实参既可以是基本类型(int/double)的也可以是类类型(string/Student)的，但是它必须要满足模板所要求的操作。
	2.函数模板的使用
		1)模板实例化
			通常而言，并不是把模板本身编译成一个处理任何类型的单一实体，而是对于实例化模板参数的每种类型，都从模板产生出一个不同的实体。
			这种用具体类型代替模板参数的过程叫做实例化。它所产生的实体被称为该模板的一个实例。
		2)只要调用函数模板，编译器就会自动引发实例化的过程，程序员不需要额外要求对函数模板做实例化。
		3)在使用函数模板的时候，一般把写在尖括号中的参数称为模板参数，而把写在圆括号中的参数称为调用参数。
				::max<int> (123, 456)
					  |      \    /
				模板参数   调用参数
		4)二次编译
			当编译器看到函数模板的定义时，首先做第一次编译，进行与类型参数无关的语法检查，如果检查通过，
			则在编译器内部生成一个关于该模板的内部表示(内部数据结构)。
			当编译器看到使用该函数模板时做第二次编译，将所提供的模板实参结合到之前生成的内部表示中，
			进行与类型参数相关的语法检查，如果检查通过，则生成针对具体实例的二进制指令。
	3.函数模板的隐式推断
		1)根据调用参数推断模板参数
			如果函数模板调用参数的类型相关于该模板的模板参数，那么在调用该函数模板时，即使不显式指定模板参数，
			编译器也有能力根据调用参数的类型隐式推断出正确的模板参数，以获得与普通函数调用一致的语法表达。
		2)不能隐式推断的三种情况：
			A.不是全部模板参数都与调用参数的类型相关；
			B.隐式推断的同时不允许发生隐式类型转换；
			C.返回类型不参与隐式推断。
	4.函数模板的重载
		详见overload.cpp
