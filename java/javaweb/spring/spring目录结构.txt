目录结构

	当项目越来越大时，每个文件夹中的文件管理就比较费时费力了，有时候不知道该删除的到底是哪一个文件。
	
	这个时候要切记目录结构的作用，用不同目录来划分对应的代码文件，以数据流向为总线，进行分段、分目录管理。
	
		src		根目录，没什么好说的，下面有main和test。
	
		main	主要目录，可以放java代码和一些资源文件。
		
		resources	存放资源文件，譬如各种的spring，mybatis，log配置文件。
		
		mapper	存放dao中每个方法对应的sql，在这里配置，无需写daoImpl。
		
		spring	这里当然是存放spring相关的配置文件，有dao service web三层。
		
		webapp	这个貌似是最熟悉的目录了，用来存放我们前端的静态资源，如jsp js css。
		
		WEB-INF	很重要的一个目录，外部浏览器无法访问，只有羡慕内部才能访问，
				可以把jsp放在这里，另外就是web.xml了。你可能有疑问了，
				为什么上面java中的resources里面的配置文件不妨在这里，那么是不是会被外部窃取到？
				你想太多了，部署时候基本上只有webapp里的会直接输出到根目录，其他都会放入WEB-INF里面，
				项目内部依然可以使用classpath:XXX来访问，好像IDE里可以设置部署输出目录，这里扯远了

				
		dao		数据访问层（接口）		与数据打交道，可以是数据库操作，也可以是文件读写操作，
										甚至是redis缓存操作，总之与数据操作有关的都放在这里，也有人叫做dal或者数据
										持久层都差不多意思。为什么没有daoImpl，因为我们用的是mybatis，所以可以直接
										在配置文件中实现接口的每个方法。
		
		entity	实体类					一般与数据库的表相对应，封装dao层取出来的数据为一个对象，
										也就是我们常说的pojo，一般只在dao层与service层之间传输。-> DO
										
		service	业务逻辑（接口）		写我们的业务逻辑，也有人叫bll，在设计业务接口时
										候应该站在“使用者”的角度。额，不要问我为什么这里没显示！
										IDE调皮我也拿它没办法~

		serviceImpl	业务逻辑（实现）	实现我们业务接口，一般事务控制是写在这里，没什么好说的。
										web	控制器	springmvc就是在这里发挥作用的，一般人叫做
										controller控制器，相当于struts中的action
										
		dto		数据传输层				刚学框架的人可能不明白这个有什么用，其实就是用于service层
										与web层之间传输，为什么不直接用entity（pojo）？其实在实际开发中发现，
										很多时间一个entity并不能满足我们的业务需求，可能呈现给用户的信息十分之多，
										这时候就有了dto，也相当于vo，记住一定不要把这个混杂在entity里面，答应我好吗？
										
		vo		数据传输类(vo)
								
		web		控制器					springmvc就是在这里发挥作用的，一般人叫做controller控制器，
										相当于struts中的action。

		constant	常量接口类
		
		utils		工具类
		
		domain		实体类
		
		
在阿里巴巴编码规约中列举了下面几个领域模型规约: 
		
		DO（Data Object）：与数据库表结构一一对应，通过DAO层向上传输数据源对象。 
		
		DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。 
		
		BO（Business Object）：业务对象。由Service层输出的封装业务逻辑的对象。 
		
		AO（Application Object）：应用对象。在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。 
		
		VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。 
		
		Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。
		
		
	特别注意的是，如果service层在调用不同的表时，我们最好调用对应表的service层的方法，不应该出现一个service调用多个dao的情况。