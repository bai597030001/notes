1.uc课程简介
1.1简介
   标c -> 标准c语言的语法学习， 与平台没有必然关系
   数据结构和算法 -> 使用标c语言实现各种结构和算法
   uc -> Unix c / Linux  系统下的高级c编程   ->  ubuntu
   目前市面上主流的操作系统：
       PC机 / 服务器：Unix系列 / linux系列 / Windows系列

       移动终端： ios系列  android系列   windows phone系列

1.2课程内容
（1）unix/linux系统的基本概述
（2）unix/linux系统下编程的基础和开发方式
（3）unix/linux系统系的内存管理
（4）unix/linux系统下的文件管理和目录操作
（5）unix/linux系统下的进程管理
（6）unix/linux系统下的信号处理  （中断）
（7）unix/linux系统下的进程间通信
（8）unix/linux系统下的网络编程
（9）unix/linux系统下的多线程编程  


今天内容：
（1）unix/linux系统的概述
（2）gcc编译器
（3）多文件以及预处理指令
（4）环境变量
（5）静态库和动态库的使用


1.unix/linux系统的概述
1.1 unix系统的简介
    unix操作系统， 于1971年诞生，早期使用汇编语言，汤普逊研发了一门语言叫B语言，丹尼斯-里奇在B语言的基础上做了修改和完善，其名为New B语言，后该名为C语言。
    unix操作系统的特点：支持多用户，多任务 以及多种处理器
    C语言诞生于1972年 

1.2linux系统的概述
    linux操作系统是一款自由， 开放源码的类unix操作系统
    c++,java,c#...在c语言的基础上诞生的
    GNU计划 - 主旨就是发展一款自由的类unix操作系统
    POSIX标准 - 制定多种不同操作系统之间的统一规范，从而保证同一个应用程序可以再不同操作系统都能执行等
    GPL通用公共许可证 - 允许对研究成果进行修改

2.GCC编译器
2.1 GCC编译器原名为 GNU C Compiler (编译器)，后来可以编译链接C++， Object-c 等等，该名为GNU Compiler Collecttion (编译器套件)

2.2主要功能
gcc xxx.c  对源代码进行编译链接，生成可执行文件，主要包含一下步骤
（1）预处理  主要对头文件进行包含以及宏进行替换等等
（2）编译    狭义上的编译，主要完成一些错误的检查等等
（3）汇编    主要讲高级语言翻译成汇编语言
（4）链接    把相关的各种资源都连结起来生成可执行文件
其中（1）（2）（3）统称为广义上的编译

2.3常用选项
   -E   表示进行预处理操作，主要对包含的头文件进行处理以及宏替换，头文件的处理结果主要有：各种头文件，各种类型的别名定义，各种函数的声明等等， 可以使用 -o  xxx.i 来指定处理结果保存的文件名；在 /usr/include目录下，使用 ls /usr/include | more 表示分屏显示ls的结果

   -S   表示使用源代码生成汇编文件，默认生成 xxx.s 文件

   -c    表示进行编译处理，生成 xxx.o 的目标文件  （只编译不链接）

   gcc/cc  xxx.o 表示链接目标文件，生成可执行文件

   -o    表示指定输出文件名
   -Wall 表示尽可能显示警告 
 
   -std   表示处理代码执行的标准

    -v    表示察看gcc的版本号

    -g    表示生成调试信息

    -O     表示对代码进行优化处理

扩展：
    man gcc/cc   察看相关的介绍和选项

2.4常见的文件后缀

.h    头文件后缀
.c    源文件后缀 
.i    经过预处理的文件后缀
.s    汇编文件后缀
.o    编译后的目标文件
.a    静态库文件的后缀
.so   共享库文件的后缀

3.多文件和预处理指令

3.1多文件程序结构
.h  头文件，主要存放 结构体的定义，变量的声明，函数的声明等
.c  源文件，主要存放变量的定义，函数的定义等
.a  静态库文件，主要存放一些函数功能的指令
.so 共享库文件，主要存放函数功能的指令

3.2预处理指令
（1）#include<> / #include ""
     主要用于包含头文件，其中 <> 主要包含标准/系统头文件， “” 主要包含自定义的头文件

（2）#define / #undef
     主要用于定义宏/取消宏 以及 宏函数 

（3）#ifndef / #if / #endif ...
     主要用于表示条件编译的功能。 在编译期间选择分支
      if - 在运行期间选择分支

（4）新的预处理指令

#line + 整数n     =>  表示从下一行起行号便更为第n行
#error + 字符串   =>  表示错误，后面的字符串为错误信息
#warning + 字符串 =>  表示产生警告信息

  1 //#error  #warning 的使用
  2 #include<stdio.h>
  3 #define VERSION 3
  4 #if (VERSION < 3) 
  5     #error "版本过低"
  6 #elif (VERSION >= 3)
  7     #warning "版本过高"
  8 #endif
  9 int main () {
 10     printf ("自娱自乐\n");
 11     return 0;
 12 }

#pragma    主要用于提供一些额外的信息，可以用于指定平台等
#pragma GCC dependency  文件名  =>  表示当前文件依赖于指定文件，如果指定文件的最后一次修改时间晚于当前文件，则产生警告，类似于监控的作用   
#pragma GCC poison 标识符  => 表示将指定的标识符设置成毒药
#pragma pack(整数)  => 表示设置结构体的对齐和补齐方式

4.环境变量
4.1概念 
PATH就是一个环境变量，一般来说，可执行文件的运行需要加上路径才是有效的，而定义在PATH中的路径会被系统自动加载，再次运行可执行文件时，可以省略路径

4.2环境变量的配置
（1）Windows  Xp系统中PATH的配置
     我的电脑->右键->选择属性->高级->环境变量->系统变量->找到Path，选择编辑->在Path变量值的最后增加分号；->将要配置的路径放在最后->点击多个确定保存即可
（2）linux系统中PATH的配置
     export PATH=$PATH:.    表示将当前路径加入到PATH中
      其中：
           $PATH - 表示将环境变量PATH原来的值获取出来
            ：   - 表示各种路径之间的分隔符
            .   - 表示当前目录
     配置永久有效的方法：
         vi ~/.bashrc文件中，在文件末尾增加代码：
              export PATH=$PATH:.
         使用source ~/.bashrc使得配置文件立即生效 

4.3编程相关的环境变量
CPATH            - 配置C语言程序头文件的路径
LIBRARY_PATH     - 配置库文件所在的路径
LD_LIBRARY_PATH  - 配置加载共享库时的路径


4.4 头文件的查找方式
（1）#include<>
     表示从系统默认的路径中进行查找该头文件  /usr/include
（2）#include""
     表示优先从当前目录中去查找该头文件，也可能去系统默认的路径中查找
（3）配置环境变量CPATH
     如：
        export CPATH=$CPATH:.     一次性的
（4）使用编译选项进行处理
     如：
        cc *.c -I 头文件路径
        cc *.c -I ..

名日预报：
      1静态库和共享库的概念及应用、
      2C语言中的错误处理














     

























 


















































