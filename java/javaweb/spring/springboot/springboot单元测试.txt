SpringBoot单元测试

	https://www.jianshu.com/p/813fd69aabee
	
	Spring Boot提供了一些注解和工具去帮助开发者测试他们的应用。相较于SpringBoot1.3，SpringBoot1.4对测试有了大的改进，
	以下示例适用SpringBoot1.4.1以及以上版本。在项目中使用Spring Boot Test支持，只需要在pom.xml引入如下配置即可：

	<dependency> 
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-test</artifactId>
		<scope>test</scope>
	</dependency> 
	
	1. spring-boot-start-test
	
		SpringBoot提供了spring-boot-start-test启动器，该启动器提供了常见的单元测试库：
		
			JUnit： 一个Java语言的单元测试框架
			
			Spring Test & Spring Boot Test：为Spring Boot应用提供集成测试和工具支持
			
			AssertJ：支持流式断言的Java测试框架
			
			Hamcrest：一个匹配器库
			
			Mockito：一个java mock框架
			
			JSONassert：一个针对JSON的断言库
			
			JsonPath：JSON XPath库
			
	2. 常用注解
	
		这里介绍一些Spring Boot单元测试常用的注解，更多详细请到Spring Boot官网[查看]
		(http://docs.spring.io/spring-boot/docs/1.4.1.RELEASE/reference/htmlsingle/#boot-features-testing)。

		
		@RunWith(SpringRunner.class)
		
			JUnit运行使用Spring的测试支持。SpringRunner是SpringJUnit4ClassRunner的新名字，这样做的目的
			仅仅是为了让名字看起来更简单一点。
			
		@SpringBootTest
		
		该注解为SpringApplication创建上下文并支持Spring Boot特性，其webEnvironment提供如下配置：
		
			Mock-加载WebApplicationContext并提供Mock Servlet环境，嵌入的Servlet容器不会被启动。
			
			RANDOM_PORT-加载一个EmbeddedWebApplicationContext并提供一个真实的servlet环境。嵌入的Servlet容器将被启动并在一个随机端口上监听。
			
			DEFINED_PORT-加载一个EmbeddedWebApplicationContext并提供一个真实的servlet环境。嵌入的Servlet容器将被启动并在一个默认的端口上监听
			（application.properties配置端口或者默认端口8080）。
			
			NONE-使用SpringApplication加载一个ApplicationContext，但是不提供任何的servlet环境。
		
		@MockBean
		
			在你的ApplicationContext里为一个bean定义一个Mockito mock。
		
		@SpyBean
		
			定制化Mock某些方法。使用@SpyBean除了被打过桩的函数，其它的函数都将真实返回。
		
		@WebMvcTest
			
			该注解被限制为一个单一的controller，需要利用@MockBean去Mock合作者（如service）。

