servlet规范

https://www.cnblogs.com/tian830937/p/5193213.html

https://www.cnblogs.com/BigTailWolf/p/6241070.html

https://blog.csdn.net/fake_bingo/article/details/82147982

https://waylau.gitbooks.io/servlet-3-1-specification/



1. ServletConfig 和 ServletContext

	1.1 ServletConfig
		
		为servlet配置一些初始化参数(<init-param>标签).注意(还可以通过注解的方式进行配置)
	
	
	1.2 ServletContext
	
		WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。
		
		1）ServletContext对象应用1：多个web组件之间使用它实现数据共享.context域对象。
		
		2）通过servletContext对象获取到整个web应用的配置信息
		
		3）通过servletContext对象实现servlet转发
		
			由于servlet中的java数据不易设置样式，所以serlvet可以将java数据转发到JSP页面中进行处理

			this.getServletContext().setAttribute("data","serlvet数据转发");
			RequestDispatcher rd = this.getServletContext().getRequestDispatcher("/viewdata.jsp");
			rd.forward(request, response);
			
		 4）通过servletContext对象读取资源文件
		 
			在web工程中，我们一般来说，是不能采用传统方式读取配置文件的，因为相对的是jvm的启动
			目录(tomcat的bin目录)，所以我们要使用web绝对目录来获取配置文件的地址
			
			读取资源文件的三种方式：
			
			第一种：使用ServletContext的getResourceAsStream方法：返回资源文件的读取字节流
				
				InputStream in = this.getServletContext().getResourceAsStream("/WEB-INF/classes/db.properties");
				Properties prop = new Properties();  
				prop.load(in);
				String url = prop.getProperty("url");
			
			第二种：使用ServletContext的getRealPath方法，获得文件的完整绝对路径path，再使用字节流读取path下的文件
				
				String path = this.getServletContext().getRealPath("/WEB-INF/classes/db.properties");
				String filename = path.substring(path.lastIndexOf("\\")+1); 
				//相比第一种方法的好处是：除了可以获取数据，还可以获取资源文件的名称
				FileInputStream in = new FileInputStream(path);
				Properties prop = new Properties();
				prop.load(in);
				String url = prop.getProperty("url");
			
			第三种：使用ServletContext的getResource方法，获得一个url对象，调用该类的openStream方法返回一个字节流，读取数据
				
				URL url = this.getServletContext().getResource("/WEB-INF/classes/db.properties");
				InputStream in = url.openStream();
				Properties prop = new Properties();
				prop.load(in);
				String url1 = prop.getProperty("url");
				
		5）web工程中，不同位置的资源文件的读取方式
		
			一、当资源文件在包下面时
				InputStream in = this.getServletContext().getResourceAsStream("/WEB-INF/classes/cn/itcast/context/db.properties");
				System.out.println(in);

			二、资源文件在web-inf下
				in = this.getServletContext().getResourceAsStream("/WEB-INF/db.properties");
				System.out.println(in);

			三、资源文件在web工程中
				in = this.getServletContext().getResourceAsStream("/db.properties");
				System.out.println(in);
				
		6）在非servlet程序中如何读取配置文件:用类装载器
		
			1）用类装载方式读取 
			 in = StudentDao.class.getClassLoader().getResourceAsStream("cn/itcast/context/db.properties");
			2）用类装载方式读取，把资源当作url对待
			 URL url = StudentDao.class.getClassLoader().getResource("db.properties");
			 这样可以获得资源文件名称：String path = url.getPath();
			3）注意：在线程休眠过程中，即使改动了资源文件，获取到的还是原始内容
			解决方案：
			  URL url = StudentDao.class.getClassLoader().getResource("db.properties");
			  String path = url.getPath();
			  
			  FileInputStream in = new FileInputStream(path);
			  Properties prop = new Properties();
			  prop.load(in);
			  System.out.println(prop.getProperty("url"));
			  
			  try {
			   Thread.sleep(1000*15);
			  } catch (InterruptedException e) {
				e.printStackTrace();
			  }
			  in = new FileInputStream(path);
			  prop = new Properties();
			  prop.load(in);
			  System.out.println(prop.getProperty("url"));
			 
			4）注意：用类装载器读取资源文件时，千万要注意，资源文件绝对不能太大，否则极易导致内存溢出