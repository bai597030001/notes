&符号代表取地址操作符，这是一个单目操作符
这个操作符必须和存储区配合使用
这个操作符要写在一个代表存储区内容的前面
可以采用%p作为占位符把地址数据打印在屏幕上
在我们的计算机上所有地址数据都是32个二进制
    数位

*也可以代表根据地址找到对应存储区的操作，
    这个时候它是一个单目操作符
这个操作符应该写在一个地址数据前面
/*
   地址操作符演示
   */
#include <stdio.h>
int main() {
	int num = 0;
	printf("&num是%p\n", &num);
	*(&num) = 10;
	printf("num是%d\n", num);
	return 0;
}
三目操作符可以从两套不同的计算规则中选择
   一套来使用
三目操作符的格式如下
布尔值 ?  公式一 ： 公式二
计算规则是如果布尔值为真则采用公式一进行计算，
    否则采用公式二进行计算
/*
   三目表达式演示
   */
#include <stdio.h>
int main() {
	int num = 0;
	printf("请输入一个整数：");
	scanf("%d", &num);
	num = num >= 0 ? num : 0 - num;              赋值（=）
	printf("num是%d\n", num);
	return 0;
}

练习：
    1.把昨天的超重练习改成使用三目表达式
	     实现

如果一个表达式中多个数字的类型不同，计算机
    必须首先把它们转换成同一个类型，然后
	才能计算

这个转换过程是由计算机自动完成的，我们把它
    叫做隐式类型转换
隐式类型转换中一定会把占地小的类型转换
   成占地大的类型，这样可以避免转换过程
   中出现数据丢失

用三目表达式演示转换效果

/*
   类型转换演示
   */
#include <stdio.h>
int main() {
	char ch = 0;
	int num = 0;
	printf("sizeof(1 ? 1 : 0.9)是%d\n", sizeof(1 ? 1 : 0.9));                    ***********
	printf("-7 + 3 > 0是%d\n", -7 + 3 > 0);
	printf("-7 + 3u > 0是%d\n", -7 + 3u > 0);                                    ??????????
    num = (char)300;
	printf("num是%d\n", num);
	return 0;
}


如果多个数据的类型大小一样则会把整数类型
    转换成浮点类型，把有符号类型转换成无
	符号类型




可以在程序中给某个数字任意指定一个类型，
    这叫做强制类型转换
强制类型转换是程序员决定的，所以不受规则
    的限制,因此是有可能导致数据丢失的。
强制类型转换时计算机会新分配一个存储区，
    这个存储区的类型是程序员指定的类型。
	然后用原来的数据对这个新存储区进行
	赋值，以后程序中使用的就是这个新
	存储区里的内容了。
这个新存储区只能在这个表达式中使用
强制类型转换不会修改任何原有存储区的内容




流程控制语句可以让程序中的语句不在从上到下
    逐条执行

分支是一种流程控制语句，它可以在程序运行的
    时候决定哪些语句需要执行，哪些语句不
	需要执行

if关键字可以用来编写分支
使用if关键字编写的分支可以根据一个布尔值
    决定一组语句是否要执行
当布尔值为真时执行对应的语句，为假时不执行
     对应的语句

演示

如果多个分支在任何时候最多只会执行其中一个
    则可以把它们合并
合并的方法是在第二个分支和以后的所有分支
    if关键字前加else关键字

如果一组合并好的分支中必然会执行其中一个则
    可以把最后一个分支的逻辑表达式和if关键字
	省略

当多个无关分支合并后它们的逻辑表达式之间
    存在前后顺序，只有当前面的逻辑表达式
	结果为假才会计算后面的逻辑表达式
可以利用上述这点简化后面逻辑表达式的编写
一个已经合并好的分支不一定可以再次拆分成
    多个无关分支

/*
   if分支演示
   */
#include <stdio.h>
int main() {
	int num = 0;
	printf("请输入一个数字：");
	scanf("%d", &num);
	/*if (num >= 0) {
	    printf("1\n");
	}
	else if (num < 0) {
		printf("2\n");
	}*/
    /*if (num > 0) {
		printf("正数\n");
	}
	else if (num < 0) {
		printf("负数\n");
	}
	else {
		printf("零\n");
	}*/
	if (num < 0) {
		printf("负数\n");
	}
	else if (num % 2) {                        *********
		printf("奇数\n");
	}
	else {
		printf("偶数\n");
	}
	return 0;
}


练习：
    1.从键盘得到三个整数，找到其中最大的
	    数字并把它打印在屏幕上

/*
   if分支练习
   */
#include <stdio.h>
int main() {
	int num = 0, num1 = 0, num2 = 0;
	printf("请输入三个数字：");
	scanf("%d%d%d", &num, &num1, &num2);
	/*if (num > num1 && num > num2) {
		printf("最大数字是%d\n", num);
	}
	else if (num1 > num && num1 > num2) {
		printf("最大数字是%d\n", num1);
	}
	else {
		printf("最大数字是%d\n", num2);
	}*/
	if (num > num1) {
		if (num > num2) {
			printf("最大数字是%d\n", num);
		}
		else {
			printf("最大数字是%d\n", num2);
		}
	}
	else {
		if (num1 > num2) {
			printf("最大数字是%d\n", num1);
		}
		else {
			printf("最大数字是%d\n", num2);
		}
	}
	return 0;
}


switch...case语句也可以用来编写分支
如果一个分支中包含有限个整数，每个整数
    需要使用一组专门的语句处理，这种
	分支就可以采用switch...case语句实现

/*
   switch...case演示
   */
#include <stdio.h>
int main() {
	int season = 0;
	printf("请输入一个整数：");
	scanf("%d", &season);
	switch (season % 4) {
	case 0:
		printf("春天\n");
		break;
	case 1:
		printf("夏天\n");
		break;
	case 2:
		printf("秋天\n");
		break;
	case 3:
		printf("冬天\n");
		break;
	default:
		printf("不认识的数字\n");
		break;
	}
	return 0;
}


循环语句可以让一组语句反复多次执行
循环语句也是一种流程控制语句

for关键字可以用来实现循环
编写for循环需要首先声明一个变量，这个变量
    叫做循环变量
for循环可以让循环变量依次代表一组相关数字，
    使用一组固定的语句对它所代表的每个
	数据进行处理

在for循环中采用如下格式描述循环变量的变化
    过程
(把开始数字赋值给循环变量;
 编写逻辑表达式描述循环变量在变化过程中
 和结束数字之间的关系;
 描述每次循环变量的变化规律)

for循环大括号里的语句用来对循环变量所代表
    的每个数字进行处理

/*
   for循环演示
   */
#include <stdio.h>
int main() {
	int num = 0;
	for (num = 1;num <= 5;num++) {
		printf("%d ", num);
	}
	printf("\n");
	return 0;
}

练习：
    1.在屏幕上打印如下内容
           54321
	   5432
	   543
	   54
	   5
       每次打印一行
    2.判断用户给定的一个非负整数是不是                          ??????????????
	     素数

/*
   for循环练习
   */
#include <stdio.h>
int main() {
	int num = 0;
	for (num = 54321;num >= 5;num /= 10) {
		printf("%d\n", num);
	}
	return 0;
}

可以在循环中使用break;随时终止循环的执行
这条语句执行后循环中的所有语句都不再继续
    执行（包括循环变量也不再变化）

/*
   for循环练习                                                  ********
   */
#include <stdio.h>
int main() {
	int num = 0, num1 = 0, res = 0;
	printf("请输入一个数字：");
	scanf("%d", &num);
    for (num1 = 2;num1 <= num - 1;num1++) {
		if (!(num % num1)) {                              ???????????????????????
			res = 1;
			break;
		}
	}
	if (num1 <= num - 1) {
		printf("数字%d不是素数\n", num);
	}
	else {
		printf("数字%d是素数\n", num);
	}
	return 0;
}


如果循环是正常结束的，则循环结束后循环
    变量的内容应该在有效数字范围之外
如果循环是采用break;语句结束的，则循环
    结束之后循环变量的内容应该在有效
	数字范围之内




在循环中可以使用continue;语句直接跳到循环
    大括号的末尾，中间的所有语句这一次都
	不执行了

/*
   continue;语句演示
   */
#include <stdio.h>
int main() {
	int num = 0;
	for (num = 1;num <= 5;num++) {
		printf("%d\n", num);
		if (num == 3) {                               ??????????
			continue;
		}
		printf("%d\n", 0 - num);
	}
	return 0;
}

不论break;语句还是continue;语句都应该写在
    循环内部的分支里

预习：
    1.for循环的实际执行步骤
	2.循环嵌套
	3.其他循环(while,do...while循环)

作业：
    1.编写程序在屏幕上打印如下内容
	   每次打印一行
           1 X 9 = 9
	   2 X 8 = 16
	   3 X 7 = 21
	   4 X 6 = 24
	   5 X 5 = 25
    2.编写程序解决鸡兔同笼问题
	   一共40个头，100只脚
      计算鸡和兔子各自有多少只、
1.

/*
   循环作业
   */
#include <stdio.h>
int main() {
	int num = 0;
	for (num = 1;num <= 5;num++) {
		printf("%d X %d = %d\n", num, 10 - num, num * (10 - num));
	}
	return 0;
}


2.

/*
   鸡兔同笼问题作业
   */
#include <stdio.h>
int main() {
	int num = 0;
	for (num = 0;num <= 40;num++) {
		if (4 * num + 2 * (40 - num) == 100) {
			printf("兔子一共有%d只，鸡一共有%d只\n", num, 40 - num);
			break;
		}
	}
	return 0;
}

