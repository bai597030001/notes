一、
1、非阻塞IO
	非阻塞IO使我们可以调用open,read,write这样的IO操作，并使这些操作永远不会阻塞
	
	对于一个给定的描述符有两种办法指定对其的非阻塞IO
	(1)如果调用open获取描述符，则可指定 O_NOBLOCK 标志
	(2)对于一个已经打开的描述符，可调用 fcntl ，由该函数打开O_NOBLOCK标志

2、记录锁 fcntl

			   int fcntl(int fd, int cmd, ... /* arg */ );
	第一个参数：文件描述浮，表示对哪个文件操作
	  二      ：操作命令，表示进行什么样的操作
			  F_DUPFD - 复制文件描述浮，第三个参数指定心文件描述浮，与dup2不同的是，寻找大于等于arg的最小描述浮，
						不会强制占用已经倍使用的文件描述浮
			  F_GETFD / F_SETFD  -  获取/设置文件描述浮标志
			  F_GETFL / F_SETFL - 获取/设置文件状态标志

			  F_GETLK / F_SETLK / F_SETLKW  -  判断锁是否存在,加锁，解锁，
	  三      ：可变长参数，是否需要取决于cmd
				实现文件锁功能时的第三个参数类型为指向一下结构体的指针类型，结构体类型说明如下：

			struct flock 
						{
						   ...
						   short l_type;    /* Type of lock: 		F_RDLCK, F_WRLCK, F_UNLCK */
						   short l_whence;  /* How to interpret l_start:
											   SEEK_SET, SEEK_CUR, SEEK_END */
						   off_t l_start;   /* Starting offset for lock */
						   off_t l_len;     /* Number of bytes to lock */
						   pid_t l_pid;     /* PID of process blocking our lock
											   (F_GETLK only) */
					   };
		
注：
	A:
	统一进程：
		如果一个进程对一个文件区间已经有了一把锁，后来该进程又企图在同一文件区间
		再加一把锁，那么新锁将替换老锁；
	不同进程：
		读锁是共享锁，不允许其他进程加写锁；
		写锁是互斥锁，不允许其他进程加锁
	B:
	加读锁时，描述符必须是读打开；
	加写锁时，描述符必须是写打开；
	
3、fcntl函数的三种命令cmd
	F_GETLK 	 F_SETLK 	 F_SETLKW
	
	F_GETLK测试能否建立一把锁，然后用F_SETLK和F_SETLKW枷锁，这两者不是一个原子操作；
	如果不想阻塞，则用F_SETLK，并对返回结果进行测试，来判断是否成功建立了锁。
	
	注：
		F_GETLK命令绝不会报告调用进程自己持有的锁。
		
4、
	select();

	pselect();
	
	poll();
	
5、一次函数调用中读写多个非连续缓冲区

	ssize_t		readv();
	
	ssize_t		writev();
	
5、读写指定的N字节数据，并处理返回值小于要求值的情况

	ssize_t		readn();
	
	ssize_t		writen();
	
6、存储映射IO

	mmap();
	
	mprotect();
	
	msync();
	
	munmap();