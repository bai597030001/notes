
1. git初始化本地仓库,提交代码(windows下使用)

	cd network_optimize
	
	git init

	1.1 提交时忽略文件  ->  创建 .gitignore 文件
	
	1.2 提交文件到暂存区 git add .
	
		error : warning: LF will be replaced by CRLF
		
		-> windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示
		
		$ rm -rf .git  // 删除.git
		$ git config --global core.autocrlf false  //禁用自动转换  

		然后重新执行：

		$ git init  
		$ git add .
		
	1.3 从暂存区将文件提交至本地仓库 git commit -m "描述"
	
	1.4 查看 git 提交记录 -> git log
	
	1.5 修改代码后再次提交 git 到本地仓库
	
		1.5.1 git diff 查看修改前后的的代码对比
		
		1.5.2 git commit -a -m "描述" 	->  跳过暂存区,直接提交代码到本地仓库
		
	1.6 版本回退
	
		在Git中，用 HEAD 表示当前版本; 上一个版本就是 HEAD^ 上上一个版本就是 HEAD^^; 
		
			当然往上100个版本写100个^比较容易数不过来，所以写成 HEAD~100
			
		$ git reset --hard HEAD^
		
		
		此时用 git log 查看,发现已经回退到了上一版本,且第二次提交的记录也消除了.
			
		此时如果你还想回到回退之前的版本,即第二次提交后的版本,怎么办呢?
		
			->	只要上面的命令行窗口还没有被关掉，你就可以顺着往上找,
			
				找到第二次提交的commit id是 1094adb...，于是就可以指定回到未来的某个版本：
			
		$ git reset --hard 1094a		版本号没必要写全，前几位就可以了
		
		
		Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，
		当你回退版本的时候，Git是修改HEAD指向
		
		你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
		
		Git提供了一个命令 git reflog 用来记录你的每一次命令


2. 提交本地仓库代码到远程仓库

	github新建 new repository

	Repository name: 仓库名称

	Description(可选): 仓库描述介绍

	Public, Private : 仓库权限（公开共享，私有或指定合作者）

	Initialize this repository with a README: 添加一个README.md		-> 建议勾上

	gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore

	license: 证书类型，对应生成文件LICENSE
	
	
	点击 Clone or dowload 会出现一个地址, copy 这个地址备用。
	
		https://github.com/bai597030001/network_optimize.git
		git@github.com:bai597030001/network_optimize.git



	2.1 本地已经建好了源码文件/文件夹并且已经有了代码,即本地仓库已经存在
	
	
		2.1.1 将本地的仓库关联到GitHub，后面的https改成刚刚自己的地址
		
			git remote add origin https://github.com/bai597030001/network_optimize.git
			
		2.1.2 上传github之前pull一下
		
			git pull origin master
			
				fatal: refusing to merge unrelated histories 错误
				
				-> 其实这个问题是因为 两个 根本不相干的 git 库， 一个是本地库， 一个是远端库， 
					然后本地要去推送到远端， 远端觉得这个本地库跟自己不相干， 所以告知无法合并
					
				-> 使用这个强制的方法 --allow-unrelated-histories 把两段不相干的 分支进行强行合并
				
				
			git pull origin master  --allow-unrelated-histories
			
			
		2.1.3 上传代码到GitHub远程仓库
		
			git push -u origin master
			
				-> remote: error: GH007: Your push would publish a private email address.
				
				在GitHub的你账号网页上右上角，个人的登录退出的位置，找到setting：
				setting->emails->Keep my email address private，把这一项去掉勾选即可。
			
			
			中间可能会让你输入Username和Password，你只要输入github的账号和密码就行了
		
		2.1.4 修改代码后再次提交:
		
			git commit -a -m "描述"
			
			git pull origin master
	
			git push -u origin master
	
	
	2.2 本地仓库还没有代码
	
			
		2.2.1 接下来就到本地操作
		
			Git Bash Here cd 到本地对应的目录; 把github上面的仓库克隆到本地
			
			git clone https://github.com/bai597030001/network_optimize.git(替换成你之前复制的地址)
			
			这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，
			如我多出了个 network_optimize 文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），
			其余都复制到那个新多出的文件夹下。
			
			接着继续输入命令 cd network_optimize, 进入 network_optimize 文件夹
			
		2.2.2 接下来依次输入以下代码即可完成其他剩余操作
		
			git add .
			
			git commit  -m  "提交信息"  
			
			git push -u origin master （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）


			git pull origin master
			
3.拉取 github 最新代码到本地

	git fetch origin master:temp
	
	git diff temp
	
	git merge temp
	
	git brach -d temp

4.修改拉取后的代码后提交到 github 

	git push origin master
	
4.分支操作

	https://www.cnblogs.com/matengfei123/p/8252128.html
	
	https://git-scm.com/book/zh/v1/Git-分支-何谓分支
	
	创建与合并分支
	
		在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
		
		截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，
		
		而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
		
		每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.
		
		
		命令:
		
			git checkout -b dev

				-> git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
				
				git branch dev 创建
				
				git checkout dev 切换

			git branch
			
				列出所有分支，当前分支前面会标一个*号。
				
			git merge dev

				合并指定分支到当前分支
				
			git branch -d dev
		
				删除dev分支
				
		分支操作:
		
		
		解决分支冲突:
		
5. git/github 删除

	git rm		删除文件
	
	git checkout --fileName  从本地/远程仓库恢复文件到本地
	
	
	github -> settings -> 底部 Delete this repository