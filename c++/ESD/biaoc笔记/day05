
 无符号类型的二进制都是非负数

 有符号类型的二进制最左边的数位决定了他的符号（0表示非负数，1表示负数）                   ????????

 有符号类型的这个数位叫它的符号位

 不能把符号位等同于符号

 同样的二进制内容按照有符号解释是一个数字，按照无符号解释就可能是另外一个数字

 当把占地大的整数类型数据赋值给占地小的整数类型存储区时，只会保留部分二进制数位

 1 #include<stdio.h>
  2 int main () {
  3     char ch = 300;    字符类型占一个字节，8位
  4     int num = ch;     整数类型占4个字节，32位 
  5     printf ("num是%d\n",num);
  6     return 0;
  7 }

 当把占地小的有符号类型整数数据赋值给占地大的有符号整数类型存储区时扩充出来的二进制填充的全是符号位


  #include<stdio.h>
  2 int main () {                          **************
  3     char ch = 300;
  4     int num = ch;
  5     printf ("num是%d\n",num);
  6     ch = 128;
  7     num = ch;
  8     printf ("num是%d\n",num);
  9     return 0;
 10 }

 


 c语言中使用大量的操作符对数字进行各种处理

 c语言中可以使用加减乘除四则运算符号（+ - * /）

 如果参与除法计算的两个数字都是整数则计算结果也只会保留整数部分            ****

 %是一个操作符，他用来表示取余操作

  1 #include<stdio.h>
  2 int main () {
  3     printf ("15 %% 6是%d\n",15 % 6);                              ***********
  4     return 0;
  5 }

 ,也是一个操作符，他可以把两个能当作数字的内容合并成一个表达式

  用,连结起来的内容可以作为数字使用，这个数字就是,后边的那个数字

  1 #include<stdio.h>
  2 int main () {
  3     int num = 0;
  4     printf ("15 %% 6是%d\n",15 % 6);
  5     num = (4 + 2,7 - 6);
  6     printf ("num 是%d\n",num);
        num = 4 + 2,7 - 6;
        printf ("num 是%d\n",num); 
  7     return 0;
  8 }

                                                              
 ,操作符的优先级非常低

 
 赋值操作符用=表示，他可以把右面得数字放到左边的存储区里

 赋值操作符要求左边的内容代表一个存储区（左值）
 
 右边的内容必须可以代表一个数字

 赋值操作符的优先等级非常低

 
 用赋值操作符编写的表达式本身可以当作数字使用，这个数字就是赋值完成后左边存储区里的数字

 可以在一条语句中使用多个赋值操作符，先计算右边的操作符，然后在计算左边的操作符

   1 #include<stdio.h>
  2 int main () {
  3     int num = 0;
  4     char ch = 0;
  5     printf ("15 %% 6是%d\n",15 % 6);
  6     num = (4 + 2,7 - 6);
  7     printf ("num 是%d\n",num);
  8     num = 4 + 2,7 - 6;
  9     printf ("num是%d\n",num);
 10     num = ch = 300;
 11     printf ("ch是%hhd,num是%d\n",ch,num);     *** 
 12     return 0;
 13 }


 
 需要一个数字配合使用的操作叫单目操作符
     两个                   双目
     三个                   三目

 大多数双目操作符可以和赋值操作符合并形成复合赋值操作符   例如+=，%=等

 复合赋值操作符也是双目操作符，他要求左边是一个可以代表存储区的内容，右边是一个可以当数字使用的内容

 复合赋值操作符把左右两边的内容先进行计算然后把计算结果记录在左边的存储区里               *******

  1 #include<stdio.h>
  2 int main () {
  3     int num = 0;
  4     char ch = 0;
  5     printf ("15 %% 6是%d\n",15 % 6);
  6     num = (4 + 2,7 - 6);
  7     printf ("num 是%d\n",num);
  8     num = 4 + 2,7 - 6;
  9     printf ("num是%d\n",num);
 10     num = ch = 300;
 11     printf ("ch是%hhd,num是%d\n",ch,num);
 12     num = 10;
 13     num += 5;                                                ****
 14     printf ("num是%d\n",num);
 15     return 0;
 16 }
 

 所有复合赋值操作符的优先级都和赋值操作符的优先级一样低

 1 #include<stdio.h>
  2 int main () {
  3     int num = 0;
  4     char ch = 0;
  5     printf ("15 %% 6是%d\n",15 % 6);
  6     num = (4 + 2,7 - 6);
  7     printf ("num 是%d\n",num);
  8     num = 4 + 2,7 - 6;
  9     printf ("num是%d\n",num);
 10     num = ch = 300;
 11     printf ("ch是%hhd,num是%d\n",ch,num);
 12     num = 10;
 13     num += 5;
 14     printf ("num是%d\n",num);
 15     num *= 2 + 3;                                     ****
 16     printf ("num是%d\n",num);
 17     return 0;
 18 }


 自增操作符（++）和自减操作符（--）可以用来对一个存储区的内容做加一或减一操作

 这两个操作符都是单目操作符

 这两个操作符必须和存储区配合使用 

 每一个操作符都有两中使用方式，分别是前操作和后操作（前操作指操作符写在存储区前面，后操作指操作符写在存储区后面）

 可以把自增或自减操作符和存储区合在一起当作一个数字使用，前操作的时候这个数字是操作完成之后的数字，后操作的时候这个数字时操作之前的数字
  
  1 #include<stdio.h>
  2 int main () {
  3     int num = 0,num1 = 0;
  4     num1 = ++num;
  5     printf ("num是%d,num1是%d\n",num,num1);
  6     num1 = num++;
  7     printf ("num是%d,num1是%d\n",num,num1);
  8     return 0;
  9 }



  1 #include<stdio.h>
  2 int main () {
  3     int num = 0,num1 = 0;
  4     num1 = ++num;
  5     printf ("num是%d,num1是%d\n",num,num1);
  6     num1 = num++;
  7     printf ("num是%d,num1是%d\n",num,num1);            *********
  8     num = 10;
  9     num1 = num++ + ++num;
 10     printf ("num是%d,num1是%d\n",num,num1);
 11     return 0;
 12 }

 不要在一条语句中对同一变量进行多次自增或自减计算，因为计算规则不确定
 
  1 #include<stdio.h>
  2 int num2;
  3 int main () {
  4     int num = 0,num1 = 0;
  5     num1 = ++num;
  6     printf ("num是%d,num1是%d\n",num,num1);
  7     num1 = num++;
  8     printf ("num是%d,num1是%d\n",num,num1);
  9     num = 10;
 10     num1 = num++ + ++num;
 11     printf ("num是%d,num1是%d\n",num,num1);
 12     num2 = 10;
 13     num1 = num2++ + ++num2;                              ***********
 14     printf("num2是%d,num1是%d\n",num2,num1);
 15     return 0;
 16 }


 
 布尔类型也是一种数据类型，只包含两个数字，它们分别叫做真（true）和假（false）
 
 布尔类型数值在计算机里也使用整数表示的，真用整数1表示，假用整数0表示 

 计算机里任何一个整数也可以当做布尔数值使用，
 整数0当布尔值使用的时候是假，其他整数当布尔值使用的时候都是真

 逻辑操作符代表对数字的某种计算规则，这些计算的结果必须是布尔值
 
 ！是一个单目逻辑操作符，他可以把真变成假，把假变成真。把他叫做求反操作符

 这个操作符应该写在一个布尔值前面                                             *****

 双目逻辑操作符包括==（等于），！=（不等于），>（大于），<（小于），>=（大于等于），<=（小于等于）

 3 == 7 假           3 ！= 7   真       3 >7   假    ......

 最多只包含一个双目逻辑操作符的表达式叫做简单逻辑表达式

   3 < 8 < 5          不能

 c语言中的所有逻辑表达式都是有一个或者多个简单逻辑表达式合并构成的

 与（&&）和 或（||）也是双目逻辑操作符，他们可以用来把两个逻辑表达式合并成一个复杂逻辑表达式

 如果使用与（&&）链接逻辑表达式A和B，则只有当他俩都是真的时候合并后的结果才是真，否则就是假

 如果使用或链接逻辑表达式A和B，则只要其中有一个的结果是真则合并后的结果就是真，否则才是假

               3 < 8 && 8 < 5       假 
 
               3 < 8 || 8 < 5       真 

 与（&&）和或（||）都具有短路特征，如果前一个表达式的结果可以决定合并后的结果则计算机忽略后一个逻辑表达式 

  1 #include<stdio.h>                                                    ************
  2 int main () {
  3     int num = 0;
  4     1 || ++num;
  5     printf ("num是%d\n",num);
  6     0 && ++num;
  7     printf ("num是%d\n",num);
  8     return 0;
  9 }

  算术操作符的优先级比双目逻辑操作符的优先级高                    **********


 （超重男人）||（超重女人）
 （（男人）&&（超重））||()
    (（gender）&&（height - weight < 105）) ||（!gender）&& (height - weight < 110)   


---------------------------------------------------------------------------------------------------------------
 

 位操作符直接操作二进制数位

 ~是一个单目位操作符，他可以把一个数字的所有二进制数位求反，所以叫做按位求反操作符

 这个操作符应该写在一个数字的前面

  1 #include<stdio.h>
  2 int main () {
  3     int num = ~0xabcdef12;                    a   1010
  4     printf ("num是0x%x\n",num);                   0101 
  5     return 0;                                      5  
  6 }

 双目位操作符包括按位与（&），按位或（|）和按位亦或（^）

 双目位操作符首先把参与计算的两个数字转换成二进制，然后用对应数位上的数字进行计算
 
 按位与（&）把对应数位上的数字进行与计算
    0   &   0           0
    1   &   1           1
    1   &   0           0




      3          0000 0011
     &5          0000 0101
                 0000 0001 

  1 #include<stdio.h>
  2 int main () {
  3     int num = ~0xabcdef12;
  4     printf ("num是0x%x\n",num);
  5     printf ("3 & 5是%d\n",3 & 5);
  6     return 0;
  7 }



 按位与可以把某些二进制数位上的数字变成0

 任何数位和0做按位与结果一定是0
 任何数位和1做按位与结果不变

 
 按位或把两个数字对应数位上的内容做或计算

 0     |       0         0
 1     |       1         1
 1     |       0         1  


            
         3          0000 0011
     |   5          0000 0101 
         7          0000 0111
         

 按位或可以把某个二进制数位上的内容变成1
 任何数位和1做按位或结果是1
 任何数位和0做按位或结果不变

 
 按位亦或把对应数位上的数字进行亦或计算

 0    ^     0         0
 1    ^     1         0
 1    ^     0         1

 
          3          0000 0011          
     ^    5          0000 0101
          6          0000 0110
 

  按位亦或可以把某些二进制数位上的内容求反
  任何二进制数位和1做按位亦或结果变成相反数
  任何二进制数位和0做按位亦或结果不变

 
  1 #include<stdio.h>
  2 int main () {
  3     int num = ~0xabcdef12;
  4     printf ("num是0x%x\n",num);
  5     printf ("3 & 5是%d\n",3 & 5);
  6     printf ("3 | 5是%d\n",3 | 5);
  7     printf ("3 ^ 5是%d\n",3 ^ 5);
  8     return 0;
  9 }

 
 移位操作也是双目为操作符，用符号（>>）或者（<<）表示

 他可以把一个数字中所有二进制数位统一向左或者向右移动n个位置
 
 >>表示向右移动
 <<表示向左移动

 它们要求左右两边各写一个数字，左边的数字是将要进行移位操作的数字，右边的数字是移动的位数

       12  >>  2     

      **** ****
      0000 1100
      0000 0011

  1 #include<stdio.h>
  2 int main () {
  3     int num = ~0xabcdef12;
  4     printf ("num是0x%x\n",num);
  5     printf ("3 & 5是%d\n",3 & 5);
  6     printf ("3 | 5是%d\n",3 | 5);
  7     printf ("3 ^ 5是%d\n",3 ^ 5);
  8     printf ("12 >> 2是%d\n",12 >> 2);         ***
  9     return 0;
 10 }


 移位操作不会修改任何存储区的内容                        ****

 在移位操作过程中一定会有一些空位置出现，这些空位置里必须填充数字

 如果向左移动则右边的空位置上一定填充0

 向右移动时空位置出现在左边，这写位置上填充的内容要根据数据类型决定
  如果数据是无符号类型则填充的一定是0
  如果数据是有符号类则填充的都是符号位的数值

 如果移动过程中没有出现有效数据丢失则向左移动n位相当于乘以2的n次方，向右移动n位相当于除以2的n次方



 预习
     1.地址操作符，三木操作符
      2.数据类型的转换
     3.分支（if分支，switch...case分支）
     4.循环 （for循环）

作业
    1.编写程序判断用户给定的年份是不是闰年，如果是闰年在屏幕上打印1，不是闰年在屏幕上打印0
      如果一个年份可以被4整除但是不能被100整除则这个年份时闰年
      如果一个年份可以被400整除则它也是闰年


/*
   闰年作业
   */
#include <stdio.h>
int main() {
	int year = 0, res = 0;
	printf("请输入一个年份数字：");
	scanf("%d", &year);
	res = (!(year % 4) && (year % 100)) || !(year % 400);                  ？？？？？？？？？？？
	printf("判断结果是%d\n", res);
	return 0;
}






