https://blog.csdn.net/h19910518/article/details/79348051

1. session是什么

		浏览器打开一个网页，用到的是HTTP协议，它是无状态的.(就是说这一次请求和上一次请求是没有
		任何关系的，互不认识的，没有关联的。但是这种无状态的的好处是快速)
	
	->带来一个问题
	
		如果希望几个请求的页面要有关联，比如在一个页面登陆了，在另一个页面也是登录状态。
		但是，这是2个不同的页面，也就是2个不同的HTTP请求，这2个HTTP请求是无状态的，也就是无关联的。
		
	->解决
	
		1.两个页面我都去登陆一遍	(no)
		2.笨方法这2个页面都去查询数据库,如果有登陆状态，就判断是登陆的了(数据库压力)
		
	->客户端存储数据方式 cookie
		
		把少量的信息存储在用户自己的电脑上.它在一个域名下是一个全局的，只要设置它的存储路径在域名
		www.a.com下 ，那么当用户用浏览器访问时，php就可以从这个域名的任意页面读取cookie中的信息。
		很好的解决了两个页面重复登陆的问题，同时也不用重复查数据库.
		
	->cookie存在的问题
	
		虽然这种方案很不错，也很快速方便，但是由于cookie是存在用户端，而且它本身存储的尺寸大小也有限，
		最关键是用户可以是可见的，并可以随意的修改，很不安全。
		
		那如何又要安全，又可以方便的全局读取信息呢？
		
	->新的存储会话机制：session 诞生
	
		在一次会话中解决2次HTTP的请求的关联，让它们产生联系，让2两个页面都能读取到找个这个全局的session信息。
		session信息存在于服务器端，所以也就很好的解决了安全问题。
		
2.session的运行机制和是怎么保存的

	它也是一种服务区存储数据的方式，肯定也是存在服务器的某个地方了。它存在服务器的/tmp 目录下
	
3.理解cookie机制
	
	举例：
	
	一家咖啡店有喝5杯咖啡免费赠一杯咖啡的优惠，然而一次性消费5杯咖啡的机会微乎其微，这时就需要某种方式来纪录
	某位顾客的消费数量。想象一下其实也无外乎下面的几种方案： 
	
	1、该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进咖啡店，店员就知道该怎么对待了。
		这种做法就是协议本身支持状态。 

    2、发给顾客一张卡片，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果顾客出示这张卡片，
		则此次消费就会与以前或以后的消费相联系起来。这种做法就是在客户端保持状态。 

    3、发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的纪录
		本上找到这个卡号对应的纪录添加一些消费信息。这种做法就是在服务器端保持状态。 
		
	
	由于HTTP协议是无状态的，而出于种种考虑也不希望使之成为有状态的，因此，后面两种方案就成为现实的选择。
	具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。
	同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要
	借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择。 
	
	
	cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，
	如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的
	HTTP请求头上发送给服务器。意思是麦当劳的会员卡只能在麦当劳的店里出示，如果某家分店还发行了
	自己的会员卡，那么进这家店的时候除了要出示麦当劳的会员卡，还要出示这家店的会员卡。 
	
	 cookie的内容主要包括：名字，值，过期时间，路径和域。

	
4.理解session机制 

	session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。
	
	当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个
	session标识 - 称为session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器
	就按照session id把这个session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，
	则为此客户端创建一个session并且生成一个与此session相关联的session id，session id
	的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。
	
	保存这个sessionid的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。
	一般这个cookie的名字都是类似于SEEESIONID，而。比如weblogic对于web应用程序生成的cookie，
	JSESSIONID=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764，它的名字就是JSESSIONID。 
	
	
	由于cookie可以被人为的禁止，必须有其他机制以便在cookie被禁止时仍然能够把sessionid传递回服务器。
	经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面.
	
	附加方式也有两种，一种是作为URL路径的附加信息，表现形式为
	http://...../xxx;jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764 
	
	另一种是作为查询字符串附加在URL后面，
	表现形式为http://...../xxx?jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764 
	
	这两种方式对于用户来说是没有区别的，只是服务器在解析的时候处理的方式不同.
	采用第一种方式也有利于把session id的信息和正常程序参数区分开来。
	为了在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个session id。 
	