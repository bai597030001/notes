#if...#elif(任意多次)...#else....#endif
以上结构也可以实现条件编译
每个预处理指令后都需要编写一组语句
#if和#elif预处理指令后必须写一个布尔值，当布尔值为真的时候他后面的语句会被编译
所有布尔值之间也存在前后顺序，前面的布尔值为假才会计算后面的布尔值
这个结构可以根据任何布尔值从多组语句种选择一组编译

用折扣例子演示

  1 #include<stdio.h>
  2 int main () {
  3 #if  defined(JINGPIN)
  4     printf ("120%%\n");
  5 #elif   !defined(JINGPIN) && !defined(GONGCHENG)                 
  6     printf ("100%%\n");
  7 #else
  8     printf ("80%%\n");
  9 #endif
 10     return 0;
 11 }

gcc -DJINGPIN .out 	       




多文件编程时一个文件中可以包含多个函数，一个函数必须完整的属于某个文件

实现多文件编程的步骤
1.把程序中所有函数分散在多个不同的.c源文件里（主函数单独放在一个文件里）
2.为每个.c源文件编写配对以.h作为扩展名的头文件（只包含主函数的源文件不需要配对的头文件）。所有不分配内存的语句都可以写在头文件里，至少应该包含所有函数的声明。
3.为每个.c源文件使用#include预处理指令包含必要的头文件。（源文件配对的头文件是必要的头文件，如果源文件里使用了头文件中声明的函数则这个头文件也是必要的头文件）
4.在gcc编译命令中必须把所有源文件名称都列出来，这样就可以编译多文件程序了

头文件的内容应该包含在预处理指令中以实现条件编译的效果
第一个预处理指令应该是#ifndef
预处理指令中的宏名称应该根据文件名称计算的来，这样可以避免多个头文件使用同样的宏名称

练习：
     1.采用多文件编程的方法编写程序制作一张彩票，把彩票中的所有数字在主函数里打印在屏幕上

  vi1.c

  1 #include<stdio.h>
  2 #include<stdlib.h>
  3 #include<time.h>
  4 #include "caipiao.h"
  5 int main () {
  6     srand(time(0));
  7     int arr[7] = {};
  8     int num = 0;
  9     func(arr, 7);
 10     for (num = 0; num <= 6; num++) {
 11         printf ("%d " , arr[num]);
 12     }
 13     printf ("\n");
 14     return 0;
 15 }

vi caipiao.c

  1 #include<stdlib.h>
  2 #include "caipiao.h"
  3 void func(int *p_arr, int size) {
  4            int num = 0;
  5              for (num = 0; num <= size - 1; num++) {
  6                      *(p_arr + num) = rand() % 36 + 1;
  7                     }
  8            }


vi caipiao.h

  1 #ifndef _CAIPIAO_H_
  2 #define _CAIPIAO_H_
  3 void func(int * , int);
  4 #endif


一个源文件里如果希望使用其他源文件里声明的全局变量就需要使用extern关键字再次声明一下这个变量
使用extern关键字声明变量的语句通常写在头文件里
一个源文件里的语句不可以使用其他源文件里声明的静态全局变量




有些存储区里可以包含多个其他存储区
代表这种存储区的变量叫做结构体变量
结构体变量的类型叫做结构体类型，也可以简称结构体
结构体必须先声明然后才能使用
声明结构体的时候需要使用struct关键字

结构体声明中包含的变量声明语句不会分配内存，他们只是描述了结构体变量存储区的内部结构

  1 /*
  2 结构体演示
  3 */
  4 #include<stdio.h>
  5 struct phone {                   
  6 char manu[20];  
  7 float price;
  8 };
  9 int main () {
 10     return 0;
 11 }

结构体声明语句可以写在头文件里

可以把结构体作为数据类型声明变量，这种变量就是结构体变量
可以用struct关键字和结构体名称作为数据类型声明结构体变量     struct phone ph;

typedef关键字可以用来给数据类型起别名，以后这写别名也可以作为数据类型使用

  1 /*
  2 结构体演示
  3 */
  4 #include<stdio.h>
  5 struct phone {                   
  6 char manu[20];  
  7 float price;
  8 };
  9 typedef struct phone phone;
 10 int main () {
 11     struct phone ph;
 12     phone ph1;
 13     return 0;
 14 }

不要用宏来给数据类型其别名
可以把typedef关键字和结构体声明语句合并，这样在声明结构体的同时就起了别名（这个时候甚至可以省略结构体名称）

  1 /*
  2 结构体演示
  3 */
  4 #include<stdio.h>
  5 typedef struct phone {
  6 char manu[20];  
  7 float price;
  8 } phone;
  9 int main () {
 10     struct phone ph;
 11     phone ph1;
 12     return 0;
 13 }   

  1 /*
  2 结构体演示
  3 */
  4 #include<stdio.h>
  5 typedef struct /*phone*/ {
  6 char manu[20];  
  7 float price;
  8 } phone;
  9 int main () {
 10     //struct phone ph;
 11     phone ph1;
 12     return 0;
 13 }   

c语言中结构体内部不可以包含函数

在使用结构体的时候通常一次只能使用其中的某一部分
可以在结构体变量名称后加.然后在加某个子部分的名称，这种写法可以表示结构体变量中的某个子部分

  1 #include<stdio.h>
  2 #include<string.h>
  3 typedef struct {
  4     char manu[20];
  5     float price;
  6 } phone;
  7 int main () {
  8     phone iphone6;
  9     strcpy(iphone6.manu, "Apple");
 10     iphone6.price = 5000.0f;
 11     return 0;
 12 }


  1 #include<stdio.h>
  2 #include<string.h>
  3 typedef struct {
  4     char manu[20];
  5     float price;
  6 } phone;
  7 int main () {
  8     phone iphone6;
  9     strcpy(iphone6.manu, "Apple");
 10     iphone6.price = 5000.0f;
 11     printf ("%s\n", iphone6.manu);
 12     printf ("%g\n", iphone6.price);
 13     return 0;
 14 }


结构体存储区的地址可以记录在一个指针变量里，这种指针叫结构体指针
结构体指针名称后加->然后在加某个子部分的名称也可以用来表示结构体存储区里的某个子部分

  1 #include<stdio.h>
  2 #include<string.h>
  3 typedef struct {
  4     char manu[20];
  5     float price;
  6 } phone;
  7 int main () {
  8     phone iphone6;
  9     phone *p_phone = NULL;               *********
 10     strcpy(iphone6.manu, "Apple");
 11     iphone6.price = 5000.0f;
 12     printf ("%s\n", iphone6.manu);
 13     printf ("%g\n", iphone6.price);
 14     p_phone = &iphone6;
 15     printf ("%s\n", p_phone->manu);
 16     printf ("%g\n", p_phone->price);
 17     return 0;
 18 }

同类型的结构体变量之间可以整体赋值                    ？？？？？？？？？？？？

  1 #include<stdio.h>
  2 #include<string.h>
  3 typedef struct {
  4     char manu[20];
  5     float price;
  6 } phone;
  7 int main () {
  8     phone iphone6, ph;                     ***********
  9 //  phone iphone6;
 10     phone *p_phone = NULL;
 11     strcpy(iphone6.manu, "Apple");
 12     iphone6.price = 5000.0f;
 13     printf ("%s\n", iphone6.manu);
 14     printf ("%g\n", iphone6.price);
 15     p_phone = &iphone6;
 16     printf ("%s\n", p_phone->manu);
 17     printf ("%g\n", p_phone->price);
 18     ph = iphone6;                           ************
 19     printf ("%s\n", ph.manu);
 20     printf ("%g\n", ph.price);
 21     return 0;
 22 }

可以采用数组初始化的方法对结构体变量进行初始化

  1 #include<stdio.h>
  2 #include<string.h>
  3 typedef struct {
  4     char manu[20];
  5     float price;
  6 } phone;
  7 int main () {
  8     phone iphone6, ph, ph1 = {"apple", 5000.0f};
  9 //  phone iphone6;
 10     phone *p_phone = NULL;
 11     strcpy(iphone6.manu, "Apple");
 12     iphone6.price = 5000.0f;
 13     printf ("%s\n", iphone6.manu);
 14     printf ("%g\n", iphone6.price);
 15     p_phone = &iphone6;
 16     printf ("%s\n", p_phone->manu);
 17     printf ("%g\n", p_phone->price);
 18     ph = iphone6;
 19     printf ("%s\n", ph.manu);
 20     printf ("%g\n", ph.price);
 21     printf ("%s\n", ph1.manu);
 22     printf ("%g\n", ph1.price);
 23     return 0;
 24 }

练习
    1.声明结构体，这种结构体的变量可以用来记录一个像素的位置
    2.声明结构体，这种结构体的变量可以用来记录一个水平长方形的位置

  1 #include<stdio.h>
  2 typedef struct {
  3     int row, col;
  4 } pixel;
  5 typedef struct {
  6     pixel pt1, pt2;
  7 } rect;
  8 int main () {
  9     return 0;
 10 }

    3.编写程序从键盘的到一个水平长方形的位置并计算出他的面积，并把计算结果打印在屏幕上

  1 #include<stdio.h>
  2 typedef struct {
  3     int row, col;
  4 } pixel;
  5 typedef struct {
  6     pixel pt1, pt2;
  7 } rect;
  8 int main () {
  9     rect r1 = {};
 10     int area = 0;
 11     printf ("请输入水平长方形的位置");
 12     scanf ("%d%d%d%d", &(r1.pt1.row),&(r1.pt1.col),&(r1.pt2.row),&(r1.pt2.col));
 13     area = (r1.pt1.row - r1.pt2.row) * (r1.pt1.col - r1.pt2.col);
 14     area >= 0 ? area : 0 - area;
 15     printf ("面积是%d\n", area);
 16     return 0;
 17 }


练习：
    4.编写程序从键盘的到两个像素的位置，计算出他们中间点的位置并把计算结果打印在屏幕上

    5.使用结构体指针改写上一个练习

/*
   结构体练习
   */
#include <stdio.h>
typedef struct {
	int row, col;
} pixel;
int main() {
	pixel pt1= {}, pt2 = {}, mid = {};
	pixel *p_pt1 = &pt1, *p_pt2 = &pt2, *p_mid = &mid;
    /*printf("请输入第一个点的位置：");
	scanf("%d%d", &(pt1.row), &(pt1.col));
	printf("请输入第二个点的位置：");
	scanf("%d%d", &(pt2.row), &(pt2.col));
	mid.row = (pt1.row + pt2.row) / 2;
	mid.col = (pt1.col + pt2.col) / 2;
	printf("中点位置是(%d, %d)\n", mid.row, mid.col);*/
	printf("请输入一个点的位置：");
	scanf("%d%d", &(p_pt1->row), &(p_pt1->col));
	printf("请输入另外一个点的位置：");
	scanf("%d%d", &(p_pt2->row), &(p_pt2->col));
	p_mid->row = (p_pt1->row + p_pt2->row) / 2;
	p_mid->col = (p_pt1->col + p_pt2->col) / 2;
	printf("中点位置是(%d, %d)\n", p_mid->row, p_mid->col);
	return 0;
}

预习：
   1.结构体（结构体做形式参数和返回之，数据对齐和补齐）
   2.枚举
   3.联合
   4.动态内存分配

作业：
   1.编写程序从键盘得到两个线段的位置，把其中比较长的线段位置打印在屏幕上


/*
   线段长度作业
   */
#include <stdio.h>
typedef struct {
	int row, col;
} pixel;
typedef struct {
    pixel pt1, pt2;
} line;
#define   LEN2(l)   (((l)->pt1.row - (l)->pt2.row) * ((l)->pt1.row - (l)->pt2.row) + ((l)->pt1.col - (l)->pt2.col) * ((l)->pt1.col - (l)->pt2.col))                      ??????????
int main() {
	line l1 = {}, l2 = {};
	printf("请输入第一条线段的位置：");
	scanf("%d%d%d%d", &(l1.pt1.row), &(l1.pt1.col), &(l1.pt2.row), &(l1.pt2.col));
	printf("请输入第二条线段的位置：");
	scanf("%d%d%d%d", &(l2.pt1.row), &(l2.pt1.col), &(l2.pt2.row), &(l2.pt2.col));
	if (LEN2(&l1) > LEN2(&l2)) {                                                         ????????   
		printf("比较长的线段位置是((%d, %d), (%d, %d))\n", l1.pt1.row, l1.pt1.col, l1.pt2.row, l1.pt2.col);
	}
	else {
		printf("比较长的线段位置是((%d, %d), (%d, %d))\n", l2.pt1.row, l2.pt1.col, l2.pt2.row, l2.pt2.col);
	}
	return 0;
}




/*
   线段长度作业
   */
#include <stdio.h>
typedef struct {
	int row, col;
} pixel;
typedef struct {
    pixel pt1, pt2;
} line;
/*int len2(line l1) {
	return (l1.pt1.row - l1.pt2.row) * (l1.pt1.row - l1.pt2.row) + (l1.pt1.col - l1.pt2.col) * (l1.pt1.col - l1.pt2.col);
}*/
int len2(const line *p_l) {
	return (p_l->pt1.row - p_l->pt2.row) * (p_l->pt1.row - p_l->pt2.row) + (p_l->pt1.col - p_l->pt2.col) * (p_l->pt1.col - p_l->pt2.col);
}
int main() {
	line l1 = {}, l2 = {};
	printf("请输入第一条线段的位置：");
	scanf("%d%d%d%d", &(l1.pt1.row), &(l1.pt1.col), &(l1.pt2.row), &(l1.pt2.col));
	printf("请输入第二条线段的位置：");
	scanf("%d%d%d%d", &(l2.pt1.row), &(l2.pt1.col), &(l2.pt2.row), &(l2.pt2.col));
	if (len2(&l1) > len2(&l2)) {                                                     ?????????????
		printf("比较长的线段位置是((%d, %d), (%d, %d))\n", l1.pt1.row, l1.pt1.col, l1.pt2.row, l1.pt2.col);
	}
	else {
		printf("比较长的线段位置是((%d, %d), (%d, %d))\n", l2.pt1.row, l2.pt1.col, l2.pt2.row, l2.pt2.col);
	}
	return 0;
}




