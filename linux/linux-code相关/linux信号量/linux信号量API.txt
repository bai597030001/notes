信号量概述


下面介绍用信号量进行同步。


信号量概念由荷兰科学家Dijkstra首先提出。信号量是一个特殊类型的变量，它可以被增加或者减少。
但对其的关键访问被保证是原子操作，即使在一个多线程程序中也是如此。


信号量有两种类型：

（1）二进制信号量。它只有0和1两种取值。

（2）计数信号量。它可以有更大的取值范围。

如果要用信号量来保护一段代码，使其每次只能被一个执行线程运行，就要用到二进制信号量、。

如果要允许有限数目的线程执行一段指定的代码，就需要用到计数信号量。


由于计数信号量并不常用，而且它实际上仅仅是二进制信号量的一种扩展，这里之介绍二进制信号量。


信号量的相关函数

信号量函数的名字都以sem_开头。

注意，需要包含头文件：

    #include<semaphore.h>  


创建信号量

    int sem_init(sem_t *sem, int pshared, unsigned int value);  

函数解释：

sem_init() 初始化一个定位在 sem 的匿名信号量。value 参数指定信号量的初始值。 
	pshared 参数指明信号量是由进程内线程共享，还是由进程之间共享。
	如果 pshared 的值为 0，那么信号量将被进程内的线程共享，并且应该放置在所有线程都可见的地址上(如全局变量，或者堆上动态分配的变量)。
　　如果 pshared 是非零值，那么信号量将在进程之间共享，
	并且应该定位共享内存区域(见 shm_open(3)、mmap(2) 和 shmget(2))。
	(因为通过 fork(2) 创建的孩子继承其父亲的内存映射，因此它也可以见到这个信号量。)
	所有可以访问共享内存区域的进程都可以使用sem_post(3)、sem_wait(3) 等等操作信号量。初始化一个已经初始的信号量其结果未定义。

返回值
　　sem_init() 成功时返回 0；错误时，返回 -1，并把 errno 设置为合适的值。
错误
　　EINVAL
　　value 超过 SEM_VALUE_MAX。
　　ENOSYS
　　pshared 非零，但系统还没有支持进程共享的信号量。


下面是控制信号量的两个函数：
信号量减一操作

    int sem_wait(sem_t * sem);  

函数说明
　　sem_wait函数也是一个原子操作，它的作用是从信号量的值减去一个“1”，但它永远会先等待该信号量为一个非零值才开始做减法。
	也就是说，如果你对一个值为2的信号量调用sem_wait(),线程将会继续执行，这信号量的值将减到1。
	如果对一个值为0的信号量调用sem_wait()，这个函数就 会地等待直到有其它线程增加了这个值使它不再是0为止。
	如果有两个线程都在sem_wait()中等待同一个信号量变成非零值，那么当它被第三个线程增加 一个“1”时，
	等待线程中只有一个能够对信号量做减法并继续执行，另一个还将处于等待状态。
返回值
　　所有这些函数在成功时都返回 0；错误保持信号量值没有更改，-1 被返回，并设置 errno 来指明错误。
错误
　　EINTR
　　这个调用被信号处理器中断，
　　EINVAL

　　sem 不是一个有效的信号量。


信号量加一操作

    int sem_post(sem_t * sem);   

说明
　　sem_post函数的作用是给信号量的值加上一个“1”，它是一个“原子操作”－－－即同时对同一个信号量做加“1”操作的两个线程是不会冲突的；
	而同 时对同一个文件进行读、加和写操作的两个程序就有可能会引起冲突。信号量的值永远会正确地加一个“2”－－因为有两个线程试图改变它。
返回值
　　sem_post() 成功时返回 0；错误时，信号量的值没有更改，-1 被返回，并设置 errno 来指明错误。
错误
　　EINVAL
　　sem 不是一个有效的信号量。
　　EOVERFLOW
　　信号量允许的最大值将要被超过。


清理信号量

    int sem_destroy (sem_t *sem);  

	这个函数也使用一个信号量指针做参数，归还自己战胜的一切资源。在清理信号量的时候如果还有线程在等待它，用户就会收到一个错误。
        与其它的函数一样，这些函数在成功时都返回“0”。 
		
	
	int sem_trywait(sem_t *sem);
	
	与 sem_wait() 类似，只是如果递减不能立即执行，调用将返回错误(errno 设置为 EAGAIN)而不是阻塞。
	
	
	int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
	
	与 sem_wait() 类似，只不过 abs_timeout 指定一个阻塞的时间上限，如果调用因不能立即执行递减而要阻塞。
	abs_timeout 参数指向一个指定绝对超时时刻的结构，这个结果由自 Epoch，1970-01-01 00:00:00 +0000(UTC) 秒数和纳秒数构成。
	这个结构定义如下：

	struct timespec {
		time_t tv_sec;        /* 秒 */
		long   tv_nsec;       /* 纳秒 */
	};

	如果调用时超时时刻已经到点，并且信号量不能立即锁定，那么 sem_timedwait() 将失败于超时(errno 设置为 ETIMEDOUT)。

	如果操作能被立即执行，那么 sem_timedwait() 永远不会失败于超时错误，而不管 abs_timeout 的值。进一步说，abs_timeout 的验证在此时没有进行。
	返回值
	所有这些函数在成功时都返回 0；错误保持信号量值没有更改，-1 被返回，并设置 errno 来指明错误。
	错误

	EINTR
		这个调用被信号处理器中断，参看 signal(7)。 
	EINVAL
		sem 不是一个有效的信号量。 

	对 sem_trywait() 有如下额外的错误：

	EAGAIN
		操作不能执行而不阻塞(也就是说，信号量当前值是零)。 

	对 sem_timedwait() 有如下额外的错误：

	EINVAL
		abs_timeout.tv_nsecs 的值小于0，或者大于等于 100 百万。 
	ETIMEDOUT
		调用在信号量锁定之前超时。 
		
		
	int sem_getvalue(sem_t *sem, int *sval);
	
	把 sem 指向的信号量当前值放置在 sval 指向的整数上。 如果有一个或多个进程或线程当前正在使用 sem_wait(3) 等待信号量，
	POSIX.1-2001 允许返回两种结果在 sval 里：要么返回 0；要么返回一个负值，它的绝对等于当前正在 sem_wait(3) 里阻塞的进程和线程数。
	Linux 选择了前面的行为(返回零)。
	注意：信号量的值可能在 sem_getvalue() 返回时已经被更改。
	
	返回值
	sem_getvalue() 成功时返回 0；错误时，返回 -1，同时把 errno 设置为合适的值。
	
	错误
	EINVAL
	sem 不是一个有效的信号量。
	
	
long clock_gettime (clockid_t which_clock, struct timespec *tp);
int clock_settime(clockid_t clk_id, const struct timespec *tp);

要包含这头文件<time.h>
且在编译链接时需加上 -lrt ;因为在librt中实现了clock_gettime函数。

which_clock 的参数解释如下：
CLOCK_REALTIME:系统实时时间,随系统实时时间改变而改变,即从UTC1970-1-1 0:0:0开始计时,
				中间时刻如果系统时间被用户该成其他,则对应的时间相应改变
CLOCK_MONOTONIC:从系统启动这一刻起开始计时,不受系统时间被用户改变的影响
CLOCK_PROCESS_CPUTIME_ID:本进程到当前代码系统CPU花费的时间
CLOCK_THREAD_CPUTIME_ID:本线程到当前代码系统CPU花费的时间

struct timespec
{
time_t tv_sec;
long int tv_nsec;
};