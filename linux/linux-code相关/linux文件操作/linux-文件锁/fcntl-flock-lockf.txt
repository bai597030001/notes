http://blog.163.com/hbu_lijian/blog/static/126129153201271634830178/

http://blog.163.com/vic_kk/blog/static/4947052420090995325874/

Posix定义了一种基于fcntl的文件锁机制,可以锁文件的任意以部分,也可以锁整个文件,
包括将来要追加的部分.一个进程对一个文件可以有多个锁来 锁定不同区域,
这种锁和信号量的概念一样,是自愿锁.传统的BSD通过flock系统调用来锁整个文件.

System V使用lockf库函数,其实也是一个fcntl接口封装.
System V提供了强制锁机制,来监控open close write等,但是可以进行删除操作,
因为删除不改变文件内容.linux支持所有上述锁.规则如下:

1. 无论是自愿还是强制锁,进程可以共享读锁和排它写锁;
2. 一个时间可以多个进程有某个文件区域的读锁,但是只能有一个进程可以拥有写锁;
3. 对一个特定文件区域,如果有读锁是,不能获得该区域的写锁,同样,如果有该区域的写锁是,不可能获得读锁.
4. linux还有一种lease锁,一个进程试图打开一个lease保护的,进程被阻塞,锁的持有者会接收到信号.
	收到信号,进程应该更新文件保持文件的一 致性,然后释放锁,如果进程不释放,
	在一个给定时间后(/proc/sys/fs/lease-break-time 45秒),内核自动删除该锁,让阻塞的进程继续执行.
5. 可以同时使用fcntl和flock,但是他们彼此不相互干扰,防止出现死锁.
	使用强制锁是,在mount时必需有 -o mand 选项,要用强制锁保护的文件必需设置
	set-group位(SGID)并清除组可执行位.内核更加这个组合来判断是否强制锁,使用fcntl来获得释放锁.
6. 如果open带参数O_TRUNC打开一个被强制锁保护的文件将会失效.
	FL_FLOCK对应flock调用,FL_POSIX对应fcntl.

flock参数一个是文件句柄,一个是命令. LOCK_SH读共享锁,??? LOCK_EX排它写,LOCK_UN释放(不使用);
FL_POSIX不会被dup或者子进程继承,操作:
fcntl(fp,CMD,pflock);
命令有:F_GETLK, F_SETLK, F_SETLKW(如果不能设置锁,进程阻塞而不是返回错误),
F_GETLK64, F_SETLK64, F_SETLKW64.
