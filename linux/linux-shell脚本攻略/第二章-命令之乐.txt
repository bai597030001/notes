1、cat
	-s		拜托多余空白行
	-T		将制表符显示为 ^|
	-n		行号

2、录制并回放终端会话
	script -t 2> timing.log  -a  output.session
	...
	commands;
	...
	exit
	
	scriptreplay timing.log  output.session
	
3、文件查找

A:	find / -iname *			忽略大小写
	
B:	find / -  \( -name "*.txt"  -o  -name  "*.pdf" \)  -print		或，OR
	
C:	find	/home	-path  "*/slynux/*"  -print			-path，将文件路径作文整体匹配
	
D:	find	/home	!	-name	"*.txt"		-print		否定参数
	
E:	-maxdepth	-mindepth	限制find命令遍历的目录深度
	find	/home	-maxdepth  3   -name  "*.txt"	-print			//注：这两个参数应该作为第三个参数出现，第四个之后出现会影响效率
	
	
F:	-type 对文件搜索进行过滤
	find	/home	-type  	d  -print		列出目录
							f				普通文件
							l				符号链接
							c 				字符设备
							b				块设备
							s				套接字
							p				FIFO
							
G:	根据文件时间进行搜索：
		访问时间	-atime
		修改时间	-mtime
		变化时间	-ctime
		可以用整数值指定，单位是天，还可以带有 + -，表示大于或小于
	eg:打印最近7天被访问过的所有文件
		find	/home	-type	f	-atime	-7	-print
											7				恰好在7天谴被访问过的文件
											+7				访问时间超过7天的所有文件
											
H:	上述三个是以天为单位，还有以分钟为单位的如下：
		-amin	修改时间
		-mmin	访问时间
		-cmin	变化时间
	find	.	-type	f	-amin	+7 		-print			访问时间超过7分钟的所有文件
	
I:	-newer特性，可以指定一个用于比较时间戳的参考文件，然后找出比参考文件更新的所有文件
	find	.	-type	f 	-newer 		file.txt   -print 
	
J:	基于文件大小的搜索

	find   .   -type   f   -size   +2k		大于2k的文件
								   -2k      小于
								   2k       等于
								   b		块，512字节
								   c 		字节
								   w		字
								   k		1024字节
								   M		1024k
								   G		1024M
								   
K:删除匹配文件

	find	.	-type	f	-name	"*.swp"		-delete
	
L:基于文件权限和所有权的匹配

	find   .   -type   f    -perm   644   -print      列出权限644的文件
	
	find   .   -type   f    -user   baijd   -print		列出用户baijd的所有文件
	
M:用find命令执行命令或动作   与exec结合

	find   .   -type   f   -user   root   -exec   chown   baijd   {}  \;
	
	给定目录中所有c文件拼接起来写入单个文件
	find   .   -type   f   -name   "*.c"  -exec   cat   {}  \;>all_c_files.txt
	
		注解：-exec之后可以接任何命令，{}表示一个匹配，对于任何匹配的文件名，{}都会被该文件名所替换
		
N:-exec结合多个命令
	一个小花招，将多个命令写到一个脚本文件command.sh中，然后
	-exec  ./command.sh  {}  \;
	
O:find跳过特定的目录
	打印不包括.git目录的所有文件
	find  devel/source_path  \( -name ".git" -prune \)  -o  \( -type  f  -print \)
		 \( -name ".git" -prune \)  作用：进行排除
		 \( -type  f  -print \)		需要执行的动作
	

4、玩转xagrs

A:将多行输出转换成单行输出
	cat  expamle.txt  
	1 2 3 4 5 6
	7 8 9 10 
	11 12 
	
	cat  expamle.txt  | xargs
	1 2 3 4 5 6 7 8 9 10 11 12
	
B:将单行输出转换成多行输出
	cat  example.txt  |  xargs  -n  3  #每行n个参数
	
C: echo  "splitXsplitXsplitXsplit"  |  xargs  -d  X		#-d选项指定一个界定符
	split split split split

D:	p57--p58

E:	find与xargs结合

	find找出所有.txt文件，用xagrs删除这些文件
	find  .  -type  f  -name  "*.txt"  -print0  |  xargs  -0  rm  -f 
													xargs  -0将\0作为输入界定符
													
	统计所有c程序文件的行数
	find  .  -type  f  -name  "*.c"  -print0  | xagrs  -0  wc  -l 
	
5、tr 进行转换

	echo  "HELLO　THIS IS WHO"	|  tr  'A-Z'  'a-z'
	
	tr删除字符 		-d
	echo  "Hello 123 World 456" | tr  -d  '0-9'
	Hello World
	
	字符集补全
	echo  hello  1  char  2  next  4  |  tr  -d  -c  '0-9 \n'
	1  2  4
	
	tr压缩字符		tr   -s 
	echo  "Hello      how old     are  you"  |  tr  -s  ' '
	Hello how old are you
	
6、校验与核实
	md5sum		filename		>		filename.md5
	md5sum		-c		filename.md5
	
	SHA-1校验算法，命令：sha1sum,用法同上，文件为filename.sha1
	
	补充：
		目录，md5deep, sha1deep
		
7、加密工具与散列
	crypt	gpg		base64		md5sum		sha1sum 	openssl
	
8、排序，唯一，与重复
	sort; uniq
	
9、临时文件，目录
	mktemp
	
10、分割文件
	split	csplit
	
11、根据扩展名切分文件名	p76

	file_jpg="sample.jpg"
	name=${file_jpg%.*}
	echo File name is: $name	==>	File name is: sample
	
	externsion=${file_jpg#.}
	echo Externsion is: jpg		
	
	%%, 从右向左执行贪婪匹配
	##，从左向右执行贪婪匹配
	
	VAR=hack.fun.book.txt
	echo ${VAR%.*}		==> hack.fun.book
	echo ${VAR%%.*}		==>hack
	
	echo ${VAR#*.}		==>fun.book.txt
	echo #{VAR##*.}		==>txt
	
12、批量重命名和移动
	
	#将文件名中的空格替换成“_”
	rename	's/ /_/g'	*	
	
	find  path  -type  f  -exec  rename  's/ /_/g'  {}  \;